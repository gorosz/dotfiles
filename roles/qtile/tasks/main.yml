---
- name: Check if qtile configuration exists
  stat: path="{{dotfiles_user_home}}/.config/qtile/"
  register: qtile_stat

- name: Check if .local/bin/ exisits
  stat: path="{{dotfiles_user_home}}/.local/bin/"
  register: local_bin_stat

- name: Back up existing qtile folder
  command: mv ~/.config/qtile ~/.config/qtile.bak
  args:
    creates: "{{dotfiles_user_home}}/.config/qtile.bak"
  when: qtile_stat.stat.exists

- name: create .config/qtile
  file:
    dest: "{{dotfiles_user_home}}/.config/qtile"
    state: directory
  when: qtile_stat.stat.exists == False

- name: create .local/bin folder
  file:
    dest: "{{dotfiles_user_home}}/.local/bin"
    state: directory
  when: local_bin_stat.stat.exists == False

- name: Make sure autolock.sh is up to date
  template:
    src: "autolock.j2"
    dest: "{{dotfiles_user_home}}/.local/bin/autolock.sh"
    mode: 0755

- name: Make sure autostart.sh is up to date
  template:
    src: "autostart.j2"
    dest: "{{dotfiles_user_home}}/.local/bin/autostart.sh"
    mode: 0755

- name: Link qtile config
  file:
    src: "{{dotfiles_home}}/roles/qtile/files/config.py.link"
    dest: "{{dotfiles_user_home}}/.config/qtile/config.py"
    state: link
    force: yes

- name: Link qtile variables
  file:
    src: "{{dotfiles_home}}/roles/qtile/files/variables.py.link"
    dest: "{{dotfiles_user_home}}/.config/qtile/variables.py"
    state: link
    force: yes

- name: make qtile config a python module
  copy:
    content: ""
    dest: "{{dotfiles_user_home}}/.config/qtile/__init__.py"
    force: no
